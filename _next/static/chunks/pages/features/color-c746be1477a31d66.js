(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[626],{9345:function(t,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/features/color",function(){return a(7445)}])},7845:function(t,e,a){"use strict";var n=a(5893);e.Z={github:"https://github.com/Bunlong/next-faker",docsRepositoryBase:"https://github.com/Bunlong/next-faker",titleSuffix:" \u2013 next-faker",logo:(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("span",{className:"mr-2 font-extrabold hidden md:inline",children:"next-faker"}),(0,n.jsx)("span",{className:"text-gray-600 font-normal hidden md:inline",children:"React hook for generating fake data for testing and development."})]}),head:(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("meta",{name:"msapplication-TileColor",content:"#ffffff"}),(0,n.jsx)("meta",{name:"theme-color",content:"#ffffff"}),(0,n.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,n.jsx)("meta",{httpEquiv:"Content-Language",content:"en"}),(0,n.jsx)("meta",{name:"description",content:"next-faker: React hook for generating fake data for testing and development."}),(0,n.jsx)("meta",{name:"og:description",content:"next-faker: React hook for generating fake data for testing and development."}),(0,n.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,n.jsx)("meta",{name:"twitter:image",content:"/next-faker.png"}),(0,n.jsx)("meta",{name:"twitter:site:domain",content:"next-faker.github.io/"}),(0,n.jsx)("meta",{name:"twitter:url",content:"https://next-faker.github.io/"}),(0,n.jsx)("meta",{name:"og:title",content:"next-faker: React hook for generating fake data for testing and development."}),(0,n.jsx)("meta",{name:"og:image",content:"/next-faker.png"}),(0,n.jsx)("meta",{name:"apple-mobile-web-app-title",content:"next-faker"}),(0,n.jsx)("link",{rel:"apple-touch-icon",sizes:"180x180",href:"/apple-icon-180x180.png"}),(0,n.jsx)("link",{rel:"icon",type:"image/png",sizes:"192x192",href:"/android-icon-192x192.png"}),(0,n.jsx)("link",{rel:"icon",type:"image/png",sizes:"32x32",href:"/favicon-32x32.png"}),(0,n.jsx)("link",{rel:"icon",type:"image/png",sizes:"96x96",href:"/favicon-96x96.png"}),(0,n.jsx)("link",{rel:"icon",type:"image/png",sizes:"16x16",href:"/favicon-16x16.png"}),(0,n.jsx)("meta",{name:"msapplication-TileImage",content:"/ms-icon-144x144.png"})]}),search:!0,prevLinks:!0,nextLinks:!0,footer:!0,footerEditLink:"Edit this page on GitHub",footerText:(0,n.jsxs)(n.Fragment,{children:["MIT ",(new Date).getFullYear()," \xa9 next-faker"]}),unstable_faviconGlyph:"\ud83d\udc4b"}},7445:function(t,e,a){"use strict";a.r(e);a(7294);var n=a(2763),r=a(7829),o=a.n(r),l=a(3805),p=a(7845);function m(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var i=function(t){return(0,l.withSSG)(o()({filename:"color.mdx",route:"/features/color",meta:{},pageMap:[{name:"features",children:[{name:"address",route:"/features/address"},{name:"animal",route:"/features/animal"},{name:"color",route:"/features/color"},{name:"commerce",route:"/features/commerce"},{name:"company",route:"/features/company"},{name:"database",route:"/features/database"},{name:"meta.json",meta:{address:"Address",animal:"Animal",color:"Color",commerce:"Commerce",company:"Company",database:"Database"}}],route:"/features"},{name:"index",route:"/"},{name:"meta.json",meta:{index:"Getting Started",features:"API"}}]},p.Z))(t)};function s(t){var e=t.components,a=m(t,["components"]);return(0,n.kt)(i,Object.assign({components:e},a),(0,n.kt)("h1",null,"Color"),(0,n.kt)("p",null,"Module to generate colors."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cmyk"),(0,n.kt)("li",{parentName:"ul"},"Color By CSSColor Space"),(0,n.kt)("li",{parentName:"ul"},"Css Supported Function"),(0,n.kt)("li",{parentName:"ul"},"Css Supported Space"),(0,n.kt)("li",{parentName:"ul"},"Hsl"),(0,n.kt)("li",{parentName:"ul"},"Human"),(0,n.kt)("li",{parentName:"ul"},"Hwb"),(0,n.kt)("li",{parentName:"ul"},"Lab"),(0,n.kt)("li",{parentName:"ul"},"Lch"),(0,n.kt)("li",{parentName:"ul"},"Rgb"),(0,n.kt)("li",{parentName:"ul"},"Space")),(0,n.kt)("h2",null,"Cmyk"),(0,n.kt)("p",null,"Returns a CMYK color."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated CMYK color.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// cmyk function\ncolor.cmyk(options?: {\n  format: ColorFormat\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.cmyk(); // => [0.55,0.59,0.72,0.85]\ncolor.cmyk(); // [0.31, 0.52, 0.32, 0.43]\ncolor.cmyk({ format: 'decimal' }); // [0.31, 0.52, 0.32, 0.43]\ncolor.cmyk({ format: 'css' }); // cmyk(100%, 0%, 0%, 0%)\ncolor.cmyk({ format: 'binary' }); // (8-32 bits) x 4\n")),(0,n.kt)("h2",null,"Color By CSSColor Space"),(0,n.kt)("p",null,"Returns a random color based on CSS color space specified."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated RGB color.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.space?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"'a98-rgb' | 'display-p3' | 'prophoto-rgb' | 'rec2020' | 'sRGB'"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'sRGB'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Color space to generate the color for.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// colorByCSSColorSpace function\ncolor.colorByCSSColorSpace(options?: {\n  format: ColorFormat,\n  space: 'a98-rgb' | 'display-p3' | 'prophoto-rgb' | 'rec2020' | 'sRGB'\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.colorByCSSColorSpace(); // => [0.5488,0.5929,0.7152]\ncolor.colorByCSSColorSpace(); // [0.93, 1, 0.82]\ncolor.colorByCSSColorSpace({ format: 'decimal' }); // [0.12, 0.21, 0.31]\ncolor.colorByCSSColorSpace({ format: 'css', space: 'display-p3' }); // color(display-p3 0.12 1 0.23)\ncolor.colorByCSSColorSpace({ format: 'binary' }); // (8-32 bits x 3)\n")),(0,n.kt)("h2",null,"Css Supported Function"),(0,n.kt)("p",null,"Returns a random css supported color function name."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// cssSupportedFunction function\ncolor.cssSupportedFunction(): string\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.cssSupportedFunction(); // => \"hwb\"\ncolor.cssSupportedFunction(); // 'rgb'\n")),(0,n.kt)("h2",null,"Css Supported Space"),(0,n.kt)("p",null,"Returns a random css supported color space name."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// cssSupportedSpace function\ncolor.cssSupportedSpace(): string\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.cssSupportedSpace(); // => \"a98-rgb\"\ncolor.cssSupportedSpace(); // 'display-p3'\n")),(0,n.kt)("h2",null,"Hsl"),(0,n.kt)("p",null,"Returns an HSL color."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated HSL color.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.includeAlpha?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"boolean"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"false")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Adds an alpha value to the color (RGBA).")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// hsl function\ncolor.hsl(options?: {\n  format: ColorFormat,\n  includeAlpha: boolean\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.hsl(); // => [198,0.59,0.72]\ncolor.hsl(); // [201, 0.23, 0.32]\ncolor.hsl({ format: 'decimal' }); // [300, 0.21, 0.52]\ncolor.hsl({ format: 'decimal', includeAlpha: true }); // [300, 0.21, 0.52, 0.28]\ncolor.hsl({ format: 'css' }); // hsl(0deg, 100%, 80%)\ncolor.hsl({ format: 'css', includeAlpha: true }); // hsl(0deg 100% 50% / 0.5)\ncolor.hsl({ format: 'binary' }); // (8-32 bits) x 3\ncolor.hsl({ format: 'binary', includeAlpha: true }); // (8-32 bits) x 4\n")),(0,n.kt)("h2",null,"Human"),(0,n.kt)("p",null,"Returns a random human readable color name."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// human function\ncolor.human(): string\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.human(); // => \"salmon\"\ncolor.human(); // 'red'\n")),(0,n.kt)("h2",null,"Hwb"),(0,n.kt)("p",null,"Returns an HWB color."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated RGB color.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// hwb function\ncolor.hwb(options?: {\n  format: ColorFormat\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.hwb(); // => [198,0.59,0.72]\ncolor.hwb(); // [201, 0.21, 0.31]\ncolor.hwb({ format: 'decimal' }); // [201, 0.21, 0.31]\ncolor.hwb({ format: 'css' }); // hwb(194 0% 0%)\ncolor.hwb({ format: 'binary' }); // (8-32 bits x 3)\n")),(0,n.kt)("h2",null,"Lab"),(0,n.kt)("p",null,"Returns a LAB (CIELAB) color."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated RGB color.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// lab function\ncolor.lab(options?: {\n  format: ColorFormat\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.lab(); // => [0.548814,18.5689,43.0379]\ncolor.lab(); // [0.832133, -80.3245, 100.1234]\ncolor.lab({ format: 'decimal' }); // [0.856773, -80.2345, 100.2341]\ncolor.lab({ format: 'css' }); // lab(29.2345% 39.3825 20.0664)\ncolor.lab({ format: 'binary' }); // (8-32 bits x 3)\n")),(0,n.kt)("h2",null,"Lch"),(0,n.kt)("p",null,"Returns an LCH color. Even though upper bound of chroma in LCH color space is theoretically unbounded, it is bounded to 230 as anything above will not make a noticeable difference in the browser."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'decimal'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated RGB color.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// lch function\ncolor.lch(options?: {\n  format: ColorFormat\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.lch(); // => [0.548814,136.4,164.5]\ncolor.lch(); // [0.522345, 72.2, 56.2]\ncolor.lch({ format: 'decimal' }); // [0.522345, 72.2, 56.2]\ncolor.lch({ format: 'css' }); // lch(52.2345% 72.2 56.2)\ncolor.lch({ format: 'binary' }); // (8-32 bits x 3)\n")),(0,n.kt)("h2",null,"Rgb"),(0,n.kt)("p",null,"Returns an RGB color."),(0,n.kt)("h3",null,"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{align:"left",parentName:"tr"},"Name"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Type"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Default"),(0,n.kt)("th",{align:"left",parentName:"tr"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"{ ... }"),(0,n.kt)("td",{align:"left",parentName:"tr"}),(0,n.kt)("td",{align:"left",parentName:"tr"},"Options object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.casing?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"Casing"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'mixed'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Letter type case of the generated hex color. Only applied when ",(0,n.kt)("inlineCode",{parentName:"td"},"'hex'")," format is used.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.format?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"'hex' | ColorFormat"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'hex'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Format of generated RGB color.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.includeAlpha?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"boolean"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"false")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Adds an alpha value to the color (RGBA).")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{align:"left",parentName:"tr"},"options.prefix?"),(0,n.kt)("td",{align:"left",parentName:"tr"},"string"),(0,n.kt)("td",{align:"left",parentName:"tr"},(0,n.kt)("inlineCode",{parentName:"td"},"'0x'")),(0,n.kt)("td",{align:"left",parentName:"tr"},"Prefix of the generated hex color. Only applied when ",(0,n.kt)("inlineCode",{parentName:"td"},"'hex'")," format is used.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," number[] | string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// rgb function\ncolor.rgb(options?: {\n  casing: Casing,\n  format: 'hex' | ColorFormat,\n  includeAlpha: boolean,\n  prefix: string\n}): string | number[]\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.rgb(); // => \"#cdfcdc\"\ncolor.rgb(); // '0xffffFF'\ncolor.rgb({ prefix: '#' }); // '#ffffFF'\ncolor.rgb({ casing: 'upper' }); // '0xFFFFFF'\ncolor.rgb({ casing: 'lower' }); // '0xffffff'\ncolor.rgb({ prefix: '#', casing: 'lower' }); // '#ffffff'\ncolor.rgb({ format: 'hex', casing: 'lower' }); // '#ffffff'\ncolor.rgb({ format: 'decimal' }); // [255, 255, 255]\ncolor.rgb({ format: 'css' }); // 'rgb(255, 0, 0)'\ncolor.rgb({ format: 'binary' }); // '10000000 00000000 11111111'\ncolor.rgb({ format: 'decimal', includeAlpha: true }); // [255, 255, 255, 0.4]\n")),(0,n.kt)("h2",null,"Space"),(0,n.kt)("p",null,"Returns a random color space name from the worldwide accepted color spaces. Source: ",(0,n.kt)("a",{href:"https://en.wikipedia.org/wiki/List_of_color_spaces_and_their_uses",parentName:"p"},"https://en.wikipedia.org/wiki/List_of_color_spaces_and_their_uses")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")," string"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"language-ts",parentName:"pre"},"// space function\ncolor.space(): string\n\n// import\nimport { useFaker } from 'next-faker';\n\nconst { color } = useFaker();\n\n// usage\ncolor.space() // => \"sYCC\"\ncolor.space() // 'sRGB'\n")))}s.isMDXComponent=!0,e.default=s}},function(t){t.O(0,[386,774,888,179],(function(){return e=9345,t(t.s=e);var e}));var e=t.O();_N_E=e}]);